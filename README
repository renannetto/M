M 2 README

Engine requirements:
 - Restitution: each PhysicalEntity in ro7.engine.world now has a restitution attribute. There is also two subclasses DynamicEntity and StaticEntity which extends PhysicalEntity and deals collisions in different ways. Both will calculate the impulse using the appropriate restitution formula and apply it on both shapes.
 - Raycasting: the class Ray in ro7.engine.world can check if it is colliding with Circles, AABs and Polygons and returns the point of collision. The CollidableEntity class in the same package contains a collidesRay method which will get this point and return a RayCollision object, with information about the collision. Finally, the GameWorld class in the same package will iterate through all the rays on its update method to find the closest intersection point and apply the collision on it.

Game requirements:
 - The circles are completely ellastic (restitution = 1), the player and the walls are completely inelastic (restitution = 0) and the triangle has a restitution of 0.5. So, when anything collides with the walls or the player is a completely inelastic collision, when two circles collide it is an ellastic collision and when a circle or a triangle collides with a triangle it is an inelastic collision.
 - The player can fire bullets, which are represented as rays. The player can also toss grenades, which emit rays in different directions.
 - The player can jump only if it is above a solid object. This is verified in the jump method on MWorld, which checks if it has a collision with a mtv pointing to up.

Known bugs: sometimes when the player toss a greande it collides and push him back

Approximate hours: 12 hours
